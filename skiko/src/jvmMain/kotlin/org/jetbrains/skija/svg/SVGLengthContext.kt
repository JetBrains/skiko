// Generated by delombok at Mon Aug 30 12:25:17 MSK 2021
package org.jetbrains.skija.svg

import org.jetbrains.skija.impl.Library.Companion.staticLoad
import org.jetbrains.annotations.ApiStatus
import org.jetbrains.skija.impl.RefCnt
import org.jetbrains.skija.impl.Managed.CleanerThunk
import org.jetbrains.skija.paragraph.Shadow
import org.jetbrains.skija.paragraph.TextBox
import org.jetbrains.skija.paragraph.Affinity
import org.jetbrains.skija.paragraph.Paragraph
import org.jetbrains.skija.paragraph.HeightMode
import org.jetbrains.skija.paragraph.StrutStyle
import org.jetbrains.skija.paragraph.BaselineMode
import org.jetbrains.skija.paragraph.RectWidthMode
import org.jetbrains.skija.paragraph.FontCollection
import org.jetbrains.skija.paragraph.ParagraphCache
import org.jetbrains.skija.paragraph.ParagraphStyle
import org.jetbrains.skija.paragraph.RectHeightMode
import org.jetbrains.skija.paragraph.DecorationStyle
import org.jetbrains.skija.paragraph.ParagraphBuilder
import org.jetbrains.skija.paragraph.PlaceholderStyle
import org.jetbrains.skija.paragraph.TextStyleAttribute
import org.jetbrains.skija.paragraph.DecorationLineStyle
import org.jetbrains.skija.paragraph.PlaceholderAlignment
import org.jetbrains.skija.paragraph.PositionWithAffinity
import org.jetbrains.skija.paragraph.TypefaceFontProvider
import org.jetbrains.skija.shaper.Shaper
import org.jetbrains.skija.shaper.FontRun
import org.jetbrains.skija.shaper.LanguageRun
import org.jetbrains.skija.shaper.ShapingOptions
import org.jetbrains.skija.shaper.FontMgrRunIterator
import org.jetbrains.skija.shaper.IcuBidiRunIterator
import org.jetbrains.skija.shaper.ManagedRunIterator
import org.jetbrains.skija.shaper.HbIcuScriptRunIterator
import org.jetbrains.skija.shaper.TextBlobBuilderRunHandler
import org.jetbrains.annotations.ApiStatus.OverrideOnly
import org.jetbrains.skija.skottie.Animation
import org.jetbrains.skija.sksg.InvalidationController
import org.jetbrains.skija.skottie.RenderFlag
import org.jetbrains.skija.skottie.AnimationBuilder
import org.jetbrains.skija.skottie.AnimationBuilderFlag
import org.jetbrains.skija.svg.SVGDOM
import org.jetbrains.skija.svg.SVGSVG
import org.jetbrains.skija.svg.SVGTag
import org.jetbrains.skija.svg.SVGNode
import org.jetbrains.skija.svg.SVGCanvas
import org.jetbrains.skija.svg.SVGLength
import org.jetbrains.skija.svg.SVGLengthType
import org.jetbrains.skija.svg.SVGLengthUnit
import org.jetbrains.skija.svg.SVGLengthContext
import org.jetbrains.skija.svg.SVGPreserveAspectRatio
import org.jetbrains.skija.svg.SVGPreserveAspectRatioAlign
import org.jetbrains.skija.svg.SVGPreserveAspectRatioScale
import org.jetbrains.skija.ColorFilter._LinearToSRGBGammaHolder
import org.jetbrains.skija.ColorFilter._SRGBToLinearGammaHolder
import org.jetbrains.skija.ColorFilter._LumaHolder
import org.jetbrains.skija.ColorSpace._SRGBHolder
import org.jetbrains.skija.ColorSpace._SRGBLinearHolder
import org.jetbrains.skija.ColorSpace._DisplayP3Holder
import org.jetbrains.annotations.ApiStatus.NonExtendable
import org.jetbrains.skija.*
import org.jetbrains.skija.FontMgr._DefaultHolder
import java.lang.IllegalArgumentException

class SVGLengthContext @JvmOverloads constructor(
    @field:Internal val width: Float,
    @field:Internal val height: Float,
    @field:Internal val dpi: Float = 90f
) {

    constructor(size: Point) : this(size._x, size._y, 90f) {}

    fun resolve(length: SVGLength, type: SVGLengthType): Float {
        return when (length._unit) {
            NUMBER -> length._value
            PX -> length._value
            PERCENTAGE -> {
                when (type) {
                    HORIZONTAL -> return length._value * width / 100.0f
                    VERTICAL -> return length._value * height / 100.0f
                    OTHER ->                 // https://www.w3.org/TR/SVG11/coords.html#Units_viewport_percentage
                        return (length._value * Math.hypot(
                            width.toDouble(),
                            height.toDouble()
                        ) / Math.sqrt(2.0) / 100.0)
                }
                length._value * dpi / 2.54f
            }
            CM -> length._value * dpi / 2.54f
            MM -> length._value * dpi / 25.4f
            IN -> length._value * dpi
            PT -> length._value * dpi / 72.272f
            PC -> length._value * dpi * 12.0f / 72.272f
            else -> throw IllegalArgumentException("Unknown SVGLengthUnit: " + length._unit)
        }
    }

    fun resolveRect(x: SVGLength, y: SVGLength, width: SVGLength, height: SVGLength): Rect {
        return Rect.Companion.makeXYWH(
            resolve(x, SVGLengthType.HORIZONTAL),
            resolve(y, SVGLengthType.VERTICAL),
            resolve(width, SVGLengthType.HORIZONTAL),
            resolve(height, SVGLengthType.VERTICAL)
        )
    }

    override fun equals(o: Any?): Boolean {
        if (o === this) return true
        if (o !is SVGLengthContext) return false
        val other = o
        if (!other.canEqual(this as Any)) return false
        if (java.lang.Float.compare(width, other.width) != 0) return false
        if (java.lang.Float.compare(height, other.height) != 0) return false
        return if (java.lang.Float.compare(dpi, other.dpi) != 0) false else true
    }

    protected fun canEqual(other: Any?): Boolean {
        return other is SVGLengthContext
    }

    override fun hashCode(): Int {
        val PRIME = 59
        var result = 1
        result = result * PRIME + java.lang.Float.floatToIntBits(width)
        result = result * PRIME + java.lang.Float.floatToIntBits(height)
        result = result * PRIME + java.lang.Float.floatToIntBits(dpi)
        return result
    }

    override fun toString(): String {
        return "SVGLengthContext(_width=" + width + ", _height=" + height + ", _dpi=" + dpi + ")"
    }

    fun withWidth(_width: Float): SVGLengthContext {
        return if (width == _width) this else SVGLengthContext(_width, height, dpi)
    }

    fun withHeight(_height: Float): SVGLengthContext {
        return if (height == _height) this else SVGLengthContext(width, _height, dpi)
    }

    fun withDpi(_dpi: Float): SVGLengthContext {
        return if (dpi == _dpi) this else SVGLengthContext(width, height, _dpi)
    }
}