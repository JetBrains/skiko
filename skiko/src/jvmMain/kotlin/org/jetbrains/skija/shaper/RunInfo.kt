// Generated by delombok at Mon Aug 30 12:25:17 MSK 2021
package org.jetbrains.skija.shaper

import org.jetbrains.skija.impl.Library.Companion.staticLoad
import org.jetbrains.annotations.ApiStatus
import org.jetbrains.skija.impl.RefCnt
import org.jetbrains.skija.impl.Managed.CleanerThunk
import org.jetbrains.skija.paragraph.Shadow
import org.jetbrains.skija.paragraph.TextBox
import org.jetbrains.skija.paragraph.Affinity
import org.jetbrains.skija.paragraph.Paragraph
import org.jetbrains.skija.paragraph.HeightMode
import org.jetbrains.skija.paragraph.StrutStyle
import org.jetbrains.skija.paragraph.BaselineMode
import org.jetbrains.skija.paragraph.RectWidthMode
import org.jetbrains.skija.paragraph.FontCollection
import org.jetbrains.skija.paragraph.ParagraphCache
import org.jetbrains.skija.paragraph.ParagraphStyle
import org.jetbrains.skija.paragraph.RectHeightMode
import org.jetbrains.skija.paragraph.DecorationStyle
import org.jetbrains.skija.paragraph.ParagraphBuilder
import org.jetbrains.skija.paragraph.PlaceholderStyle
import org.jetbrains.skija.paragraph.TextStyleAttribute
import org.jetbrains.skija.paragraph.DecorationLineStyle
import org.jetbrains.skija.paragraph.PlaceholderAlignment
import org.jetbrains.skija.paragraph.PositionWithAffinity
import org.jetbrains.skija.paragraph.TypefaceFontProvider
import org.jetbrains.skija.shaper.Shaper
import org.jetbrains.skija.shaper.FontRun
import org.jetbrains.skija.shaper.LanguageRun
import org.jetbrains.skija.shaper.ShapingOptions
import org.jetbrains.skija.shaper.FontMgrRunIterator
import org.jetbrains.skija.shaper.IcuBidiRunIterator
import org.jetbrains.skija.shaper.ManagedRunIterator
import org.jetbrains.skija.shaper.HbIcuScriptRunIterator
import org.jetbrains.skija.shaper.TextBlobBuilderRunHandler
import org.jetbrains.annotations.ApiStatus.OverrideOnly
import org.jetbrains.skija.skottie.Animation
import org.jetbrains.skija.sksg.InvalidationController
import org.jetbrains.skija.skottie.RenderFlag
import org.jetbrains.skija.skottie.AnimationBuilder
import org.jetbrains.skija.skottie.AnimationBuilderFlag
import org.jetbrains.skija.svg.SVGDOM
import org.jetbrains.skija.svg.SVGSVG
import org.jetbrains.skija.svg.SVGTag
import org.jetbrains.skija.svg.SVGNode
import org.jetbrains.skija.svg.SVGCanvas
import org.jetbrains.skija.svg.SVGLength
import org.jetbrains.skija.svg.SVGLengthType
import org.jetbrains.skija.svg.SVGLengthUnit
import org.jetbrains.skija.svg.SVGLengthContext
import org.jetbrains.skija.svg.SVGPreserveAspectRatio
import org.jetbrains.skija.svg.SVGPreserveAspectRatioAlign
import org.jetbrains.skija.svg.SVGPreserveAspectRatioScale
import org.jetbrains.skija.ColorFilter._LinearToSRGBGammaHolder
import org.jetbrains.skija.ColorFilter._SRGBToLinearGammaHolder
import org.jetbrains.skija.ColorFilter._LumaHolder
import org.jetbrains.skija.ColorSpace._SRGBHolder
import org.jetbrains.skija.ColorSpace._SRGBLinearHolder
import org.jetbrains.skija.ColorSpace._DisplayP3Holder
import org.jetbrains.annotations.ApiStatus.NonExtendable
import org.jetbrains.skija.*
import org.jetbrains.skija.FontMgr._DefaultHolder

class RunInfo(
    var _fontPtr: Long, val bidiLevel: Int, val advanceX: Float, val advanceY: Float, val glyphCount: Long,
    /**
     * WARN does not work in Shaper.makeCoreText https://bugs.chromium.org/p/skia/issues/detail?id=10899
     */
    val rangeBegin: Int,
    /**
     * WARN does not work in Shaper.makeCoreText https://bugs.chromium.org/p/skia/issues/detail?id=10899
     */
    val rangeSize: Int
) {
    /**
     * WARN does not work in Shaper.makeCoreText https://bugs.chromium.org/p/skia/issues/detail?id=10899
     */
    /**
     * WARN does not work in Shaper.makeCoreText https://bugs.chromium.org/p/skia/issues/detail?id=10899
     */
    val advance: Point
        get() = org.jetbrains.skija.Point(advanceX, advanceY)

    /**
     * WARN does not work in Shaper.makeCoreText https://bugs.chromium.org/p/skia/issues/detail?id=10899
     */
    val rangeEnd: Int
        get() = rangeBegin + rangeSize
    val font: Font
        get() {
            check(_fontPtr != 0L) { "getFont() is only valid inside RunHandler callbacks" }
            return Font.Companion.makeClone(_fontPtr)
        }

    fun setFontPtr(_fontPtr: Long): RunInfo {
        this._fontPtr = _fontPtr
        return this
    }

    override fun equals(o: Any?): Boolean {
        if (o === this) return true
        if (o !is RunInfo) return false
        val other = o
        if (!other.canEqual(this as Any)) return false
        if (_fontPtr != other._fontPtr) return false
        if (bidiLevel != other.bidiLevel) return false
        if (java.lang.Float.compare(advanceX, other.advanceX) != 0) return false
        if (java.lang.Float.compare(advanceY, other.advanceY) != 0) return false
        if (glyphCount != other.glyphCount) return false
        if (rangeBegin != other.rangeBegin) return false
        return if (rangeSize != other.rangeSize) false else true
    }

    protected fun canEqual(other: Any?): Boolean {
        return other is RunInfo
    }

    override fun hashCode(): Int {
        val PRIME = 59
        var result = 1
        val `$_fontPtr` = _fontPtr
        result = result * PRIME + (`$_fontPtr` ushr 32 xor `$_fontPtr`).toInt()
        result = result * PRIME + bidiLevel
        result = result * PRIME + java.lang.Float.floatToIntBits(advanceX)
        result = result * PRIME + java.lang.Float.floatToIntBits(advanceY)
        val `$_glyphCount` = glyphCount
        result = result * PRIME + (`$_glyphCount` ushr 32 xor `$_glyphCount`).toInt()
        result = result * PRIME + rangeBegin
        result = result * PRIME + rangeSize
        return result
    }

    override fun toString(): String {
        return "RunInfo(_fontPtr=" + _fontPtr + ", _bidiLevel=" + bidiLevel + ", _advanceX=" + advanceX + ", _advanceY=" + advanceY + ", _glyphCount=" + glyphCount + ", _rangeBegin=" + rangeBegin + ", _rangeSize=" + rangeSize + ")"
    }
}